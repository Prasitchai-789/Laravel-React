import Button from '@/components/Buttons/Button';
import InputLabel from '@/components/Inputs/InputLabel';
import Select from '@/components/Inputs/Select';
import { router, useForm } from '@inertiajs/react';
import dayjs from 'dayjs';
import 'dayjs/locale/th';
import { Calendar, Clock, Factory, Leaf, Moon, Package, Sun, Target, TrendingUp, Users, Zap } from 'lucide-react';
import { useState } from 'react';
import Swal from 'sweetalert2';

interface Line {
    id: number;
    name: string;
}

interface Production {
    id: number;
    date: string;
    line_id: number;
    shift: string;
    product_qty: number;
    target_qty: number;
}

interface Labor {
    id: number;
    production_id: number;
    workers?: number | string;
    hours: number;
    ot_hours: number;
    labor_cost: number;
}

interface Energy {
    production_id: number;
    type: string;
    quantity: number | string;
    price: number | string;
    total: number | string;
    number_kwh?: number | string;
}

interface ProductionFormData {
    date: string;
    shift: string;
    line_id: number | string;
    product_qty: number | string;
    target_qty: number | string;
    workers?: number;
    energies?: number;
    hours?: number;
    ot_hours?: number;
    electricity_kwh?: number;
    palm_fiber?: number;
    number_kwh?: number;
}

interface FerProductionFormProps {
    mode?: 'create' | 'edit';
    production?: Production;
    onClose: () => void;
    onSuccess?: () => void;
    lines: Line[];
    labors?: Labor[];
    energies?: Energy[];
}

export default function FerProductionForm({ mode, production, onClose, onSuccess, lines, labors, energies }: FerProductionFormProps) {
    const { data, setData, reset, processing } = useForm<ProductionFormData>({
        date: production?.date ? dayjs(production.date).format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD'),
        shift: production?.shift || '',
        line_id: production?.line_id || '',
        product_qty: production?.product_qty || '',
        target_qty: production?.target_qty || '',
        workers: production?.labors?.find((l) => l.production_id === production?.id)?.workers || '',
        hours: production?.labors?.find((l) => l.production_id === production?.id)?.hours || '',
        ot_hours: production?.labors?.find((l) => l.production_id === production?.id)?.ot_hours || '',
        number_kwh: production?.energies?.find((e) => e.production_id === production?.id)?.number_kwh || '',
        palm_fiber: production?.energies?.find((e) => e.production_id === production?.id)?.cost || '',
    });

    const [formErrors, setFormErrors] = useState<Partial<Record<string, string>>>({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setData(name as keyof ProductionFormData, value);
        if (formErrors[name]) {
            setFormErrors((prev) => ({ ...prev, [name]: '' }));
        }
    };
    const validateForm = () => {
        const newErrors: Partial<Record<string, string>> = {};
        if (!data.date) newErrors.date = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
        if (!data.shift) newErrors.shift = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô';
        if (!data.line_id) newErrors.line_id = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï';
        if (!data.product_qty || parseFloat(data.product_qty as string) < 0) newErrors.product_qty = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        if (!data.target_qty || parseFloat(data.target_qty as string) < 0) newErrors.target_qty = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        if (!data.workers) newErrors.workers = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô';
        if (!data.hours) newErrors.hours = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';
        if (!data.ot_hours) newErrors.ot_hours = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á Overtime';
        if (!data.number_kwh) newErrors.number_kwh = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (kWh)';
        if (!data.palm_fiber) newErrors.palm_fiber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏Å‡∏∞‡∏•‡∏≤‡∏õ‡∏≤‡∏•‡πå‡∏° (kg)';

        setFormErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!validateForm()) return;

        setIsSubmitting(true);

        const payload = {
            date: data.date,
            shift: data.shift,
            line_id: data.line_id,
            product_qty: parseFloat(data.product_qty as string),
            target_qty: parseFloat(data.target_qty as string),
            workers: data.workers,
            hours: data.hours,
            ot_hours: data.ot_hours,
            number_kwh: data.number_kwh,
            palm_fiber: data.palm_fiber,
        };

        if (mode === 'create') {
            router.post(route('fertilizer.productions.store'), payload, {
                onSuccess: () => {
                    Swal.fire({
                        icon: 'success',
                        title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                    reset();
                    onClose?.();
                    onSuccess?.();
                },
                onError: (errors) => {
                    console.error(errors);
                    Swal.fire({
                        icon: 'error',
                        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                    setFormErrors(errors);
                },
                onFinish: () => setIsSubmitting(false),
            });
        } else if (mode === 'edit' && production?.id) {
            router.put(route('fertilizer.productions.update', production.id), payload, {
                onSuccess: (page) => {
                    Swal.fire({
                        icon: 'success',
                        title: page.props?.flash?.message || '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                    reset();
                    onClose?.();
                    onSuccess?.();
                },
                onError: (errors) => {
                    console.error(errors);
                    Swal.fire({
                        icon: 'error',
                        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                    setFormErrors(errors);
                },
                onFinish: () => setIsSubmitting(false),
            });
        }
    };

    const achievementRate =
        data.target_qty && data.product_qty && parseFloat(data.target_qty as string) > 0
            ? ((parseFloat(data.product_qty as string) / parseFloat(data.target_qty as string)) * 100).toFixed(2)
            : null;

    const linesOptions = [
        { value: '', label: '-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï --', disabled: true },
        ...lines.map((line) => ({ value: line.id, label: line.name })),
    ];

    const shiftOptions = [
        { value: '', label: '-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô --', disabled: true },
        { value: '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', label: 'üåû ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
        { value: '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô', label: 'üåô ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô' },
    ];

    const getAchievementColor = (rate: string | null) => {
        if (!rate) return 'text-gray-600';
        const numericRate = parseFloat(rate);
        if (numericRate >= 100) return 'text-green-600';
        if (numericRate >= 80) return 'text-yellow-600';
        return 'text-red-600';
    };

    const getAchievementBgColor = (rate: string | null) => {
        if (!rate) return 'bg-gray-100';
        const numericRate = parseFloat(rate);
        if (numericRate >= 100) return 'bg-green-50 border-green-200';
        if (numericRate >= 80) return 'bg-yellow-50 border-yellow-200';
        return 'bg-red-50 border-red-200';
    };

    const getShiftIcon = (shift: string) => {
        return shift === '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' ? <Sun size={20} className="text-yellow-500" /> : <Moon size={20} className="text-blue-500" />;
    };

    return (
        <div className="font-anuphan">
            {/* Header */}
            <div className="mb-3 rounded-xl bg-gradient-to-r from-green-500 to-emerald-600 p-6 text-white shadow-lg">
                <div className="flex items-center gap-3">
                    <div className="rounded-lg bg-white/20 p-2 backdrop-blur-sm">
                        <Factory size={24} />
                    </div>
                    <div>
                        <h2 className="text-2xl font-bold">{mode === 'create' ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï'}</h2>
                        <p className="text-green-100">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö</p>
                    </div>
                </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
                {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
                <div className="rounded-2xl border border-green-200 bg-white shadow-sm">
                    <div className="rounded-t-2xl bg-gradient-to-r from-green-50 to-emerald-50 p-5">
                        <div className="flex items-center gap-3">
                            <div className="rounded-lg bg-green-100 p-2">
                                <Calendar className="text-green-600" size={20} />
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-green-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</h3>
                                <p className="text-sm text-green-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</p>
                            </div>
                        </div>
                    </div>
                    <div className="p-6">
                        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                            <div className="space-y-4">
                                <InputLabel
                                    label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï"
                                    name="date"
                                    value={data.date}
                                    onChange={handleChange}
                                    error={formErrors.date}
                                    disabled={processing || isSubmitting}
                                    type="date"
                                    icon={<Calendar size={18} className="text-gray-400" />}
                                />
                                <Select
                                    label="‡∏Å‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                                    name="shift"
                                    value={data.shift}
                                    onChange={handleChange}
                                    options={shiftOptions}
                                    error={formErrors.shift}
                                    disabled={processing || isSubmitting}
                                    icon={data.shift ? getShiftIcon(data.shift) : <Clock size={18} className="text-gray-400" />}
                                />
                                <Select
                                    label="‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"
                                    name="line_id"
                                    value={data.line_id}
                                    onChange={handleChange}
                                    options={linesOptions}
                                    error={formErrors.line_id}
                                    disabled={processing || isSubmitting}
                                    type="text"
                                    icon={<Factory size={18} className="text-gray-400" />}
                                />
                            </div>
                            <div className="space-y-4">
                                <InputLabel
                                    label="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö)"
                                    placeholder="0.00"
                                    name="target_qty"
                                    value={data.target_qty ? Number(data.target_qty).toLocaleString('th-TH', { maximumFractionDigits: 2 }) : ''}
                                    onChange={(e) => {
                                        const rawValue = e.target.value.replace(/,/g, ''); // ‡∏•‡∏ö comma ‡∏≠‡∏≠‡∏Å
                                        setData('target_qty', rawValue);
                                    }}
                                    error={formErrors.target_qty}
                                    disabled={processing || isSubmitting}
                                    type="text"
                                />
                                <InputLabel
                                    label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ (‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö)"
                                    placeholder="0.00"
                                    type="text"
                                    name="product_qty"
                                    value={data.product_qty ? Number(data.product_qty).toLocaleString('th-TH', { maximumFractionDigits: 2 }) : ''}
                                    onChange={(e) => {
                                        const rawValue = e.target.value.replace(/,/g, ''); // ‡∏•‡∏ö comma ‡∏≠‡∏≠‡∏Å
                                        setData('product_qty', rawValue);
                                    }}
                                    error={formErrors.product_qty}
                                    disabled={processing || isSubmitting}
                                />
                                {achievementRate && (
                                    <div className={`rounded-xl border-2 p-4 ${getAchievementBgColor(achievementRate)}`}>
                                        <div className="flex items-center justify-between">
                                            <div className="flex items-center gap-2">
                                                <TrendingUp size={20} className={getAchievementColor(achievementRate)} />
                                                <span className="text-sm font-medium text-gray-700">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:</span>
                                            </div>
                                            <span className={`text-xl font-bold ${getAchievementColor(achievementRate)}`}>{achievementRate}%</span>
                                        </div>
                                        <div className="mt-3 h-3 w-full rounded-full bg-gray-200">
                                            <div
                                                className="h-3 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 transition-all duration-500"
                                                style={{ width: `${Math.min(parseFloat(achievementRate), 100)}%` }}
                                            ></div>
                                        </div>
                                        <div className="mt-2 flex justify-between text-xs text-gray-500">
                                            <span>0%</span>
                                            <span>100%</span>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô */}
                <div className="rounded-2xl border border-blue-200 bg-white shadow-sm">
                    <div className="rounded-t-2xl bg-gradient-to-r from-blue-50 to-cyan-50 p-5">
                        <div className="flex items-center gap-3">
                            <div className="rounded-lg bg-blue-100 p-2">
                                <Users className="text-blue-600" size={20} />
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-blue-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</h3>
                                <p className="text-sm text-blue-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</p>
                            </div>
                        </div>
                    </div>
                    <div className="p-6">
                        <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                            <InputLabel
                                label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
                                placeholder="0"
                                name="workers"
                                value={data.workers?.toString() ?? ''}
                                onChange={handleChange}
                                error={formErrors.workers}
                                disabled={processing || isSubmitting}
                                type="number"
                                min={0}
                                icon={<Users size={18} className="text-gray-400" />}
                            />
                            <InputLabel
                                label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)"
                                placeholder="0.00"
                                name="hours"
                                value={data.hours}
                                onChange={handleChange}
                                error={formErrors.hours}
                                disabled={processing || isSubmitting}
                                type="number"
                                min={0}
                                icon={<Clock size={18} className="text-gray-400" />}
                            />
                            <InputLabel
                                label="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)"
                                placeholder="0.00"
                                name="ot_hours"
                                value={data.ot_hours}
                                onChange={handleChange}
                                error={formErrors.ot_hours}
                                disabled={processing || isSubmitting}
                                type="number"
                                min={0}
                                icon={<Zap size={18} className="text-gray-400" />}
                            />
                        </div>
                    </div>
                </div>

                {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö */}
                <div className="rounded-2xl border border-amber-200 bg-white shadow-sm">
                    <div className="rounded-t-2xl bg-gradient-to-r from-amber-50 to-orange-50 p-5">
                        <div className="flex items-center gap-3">
                            <div className="rounded-lg bg-amber-100 p-2">
                                <Leaf className="text-amber-600" size={20} />
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-amber-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h3>
                                <p className="text-sm text-amber-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</p>
                            </div>
                        </div>
                    </div>
                    <div className="p-6">
                        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                            <InputLabel
                                label="‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (‡∏Å‡∏¥‡πÇ‡∏•‡∏ß‡∏±‡∏ï‡∏ï‡πå)"
                                placeholder="0.00"
                                name="number_kwh"
                                value={data.number_kwh ? Number(data.number_kwh).toLocaleString('th-TH', { maximumFractionDigits: 2 }) : ''}
                                onChange={(e) => {
                                    const rawValue = e.target.value.replace(/,/g, ''); // ‡∏•‡∏ö comma ‡∏≠‡∏≠‡∏Å
                                    setData('number_kwh', rawValue);
                                }}
                                error={formErrors.number_kwh}
                                disabled={processing || isSubmitting}
                                type="text"
                                icon={<Zap size={18} className="text-gray-400" />}
                            />
                            <InputLabel
                                label="‡∏Å‡∏∞‡∏•‡∏≤‡∏õ‡∏≤‡∏•‡πå‡∏° (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)"
                                placeholder="0.00"
                                name="palm_fiber"
                                value={data.palm_fiber ? Number(data.palm_fiber).toLocaleString('th-TH', { maximumFractionDigits: 2 }) : ''}
                                onChange={(e) => {
                                    const rawValue = e.target.value.replace(/,/g, ''); // ‡∏•‡∏ö comma ‡∏≠‡∏≠‡∏Å
                                    setData('palm_fiber', rawValue);
                                }}
                                error={formErrors.palm_fiber}
                                disabled={processing || isSubmitting}
                                type="text"
                                icon={<Leaf size={18} className="text-gray-400" />}
                            />
                        </div>
                    </div>
                </div>

                {/* Footer */}
                <div className="rounded-2xl border border-gray-200 bg-gray-50 p-6">
                    <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                        <div className="text-sm text-gray-600">
                            {mode === 'create' ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'}
                        </div>
                        <div className="flex gap-3">
                            <Button type="button" variant="gray" onClick={onClose} disabled={isSubmitting} className="min-w-[100px]">
                                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </Button>
                            <Button
                                type="submit"
                                variant="primary"
                                disabled={isSubmitting}
                                loading={isSubmitting}
                                className="min-w-[140px] bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700"
                            >
                                {mode === 'create' ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                            </Button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    );
}
