import React, { useState, useEffect, useCallback } from 'react';
import MonthlyTrendChart from './MonthlyTrendChart';
import CategoryUsageStats from './CategoryUsageStats';
import TopProductsSection from './TopProductsSection';

interface MiddleSideProps {
    timeRange: string;
    selectedDate?: Date | null;
    dateRange?: [Date | null, Date | null];
    dateMode?: 'single' | 'range';
}

const MiddleSide: React.FC<MiddleSideProps> = ({
    timeRange,
    selectedDate,
    dateRange,
    dateMode
}) => {
    const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    useEffect(() => {
        console.log('üîÑ MiddleSide - Props changed, updating lastUpdate');
        setLastUpdate(new Date());
    }, [timeRange, selectedDate, dateRange, dateMode]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° dateMode ‡πÉ‡∏ô dependencies

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å - ‡πÉ‡∏ä‡πâ useCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà render
    const getDisplayTimeRange = useCallback(() => {
        console.log('üìÖ MiddleSide - Calculating display time range:', {
            timeRange,
            dateMode,
            selectedDate: selectedDate?.toLocaleDateString('th-TH'),
            dateRange: dateRange?.map(d => d?.toLocaleDateString('th-TH'))
        });

        if (timeRange === 'custom') {
            if (dateMode === 'single' && selectedDate) {
                return `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate.toLocaleDateString('th-TH')}`;
            } else if (dateMode === 'range' && dateRange?.[0] && dateRange?.[1]) {
                return `‡∏ä‡πà‡∏ß‡∏á ${dateRange[0].toLocaleDateString('th-TH')} - ${dateRange[1].toLocaleDateString('th-TH')}`;
            }
            // ‡∏Å‡∏£‡∏ì‡∏µ custom ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            return '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á';
        }

        const rangeLabels: { [key: string]: string } = {
            'month': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
            'quarter': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ô‡∏µ‡πâ',
            'year': '‡∏õ‡∏µ‡∏ô‡∏µ‡πâ',
            'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        };

        return rangeLabels[timeRange] || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
    }, [timeRange, selectedDate, dateRange, dateMode]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÉ‡∏ä‡πâ useCallback
    const handleDataUpdate = useCallback(() => {
        console.log('üì¢ MiddleSide - Child component reported data update');
        setLastUpdate(new Date());
    }, []);

    // Debug: Log props changes
    useEffect(() => {
        console.log('üîç MiddleSide - Props received:', {
            timeRange,
            selectedDate: selectedDate?.toISOString(),
            dateRange: dateRange?.map(d => d?.toISOString()),
            dateMode
        });
    }, [timeRange, selectedDate, dateRange, dateMode]);

    const displayTimeRange = getDisplayTimeRange();

    return (
        // Product Usage Statistics
        <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/60 dark:border-gray-700/60 overflow-hidden">
            <div className="p-6 border-b border-gray-200/50 dark:border-gray-700/50 bg-gradient-to-r from-blue-50/50 to-indigo-50/30 dark:from-blue-900/10 dark:to-indigo-900/5">
                <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                    <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25">
                            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                        </div>
                        <div>
                            <h3 className="text-xl font-bold text-gray-900 dark:text-white">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                {displayTimeRange}
                            </p>
                        </div>
                    </div>
                    <div className="flex items-center space-x-2">
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400 border border-blue-200/50 dark:border-blue-700/50">
                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {displayTimeRange} ‚Ä¢ ‡πÇ‡∏´‡∏•‡∏î: {lastUpdate.toLocaleTimeString('th-TH')}
                        </span>
                    </div>
                </div>
            </div>

            <div className="p-6 space-y-8">
                <MonthlyTrendChart
                    key={`monthly-chart-${timeRange}-${selectedDate?.getTime()}-${dateRange?.[0]?.getTime()}-${dateRange?.[1]?.getTime()}`}
                    timeRange={timeRange}
                    selectedDate={selectedDate}
                    dateRange={dateRange}
                    dateMode={dateMode}
                    onDataUpdate={handleDataUpdate}
                />

                {/* <CategoryUsageStats
                    key={`category-stats-${timeRange}-${selectedDate?.getTime()}-${dateRange?.[0]?.getTime()}-${dateRange?.[1]?.getTime()}`}
                    timeRange={timeRange}
                    selectedDate={selectedDate}
                    dateRange={dateRange}
                    dateMode={dateMode}
                    onDataUpdate={handleDataUpdate}
                /> */}

                <TopProductsSection
                    key={`top-products-${timeRange}-${selectedDate?.getTime()}-${dateRange?.[0]?.getTime()}-${dateRange?.[1]?.getTime()}`}
                    timeRange={timeRange}
                    selectedDate={selectedDate}
                    dateRange={dateRange}
                    dateMode={dateMode}
                    onDataUpdate={handleDataUpdate}
                />
            </div>
        </div>
    );
};

export default MiddleSide;
